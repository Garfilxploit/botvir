{"version":3,"file":"index.umd.production.min.cjs","sources":["../src/index.ts"],"sourcesContent":["import { LazyURL } from 'lazy-url';\nimport type { ClientRequest } from 'http';\nimport { LazyURLSearchParams } from 'http-form-urlencoded';\n\nexport interface IReqInfo\n{\n\tprotocol?: string\n\tauth?: string\n\thostname?: string\n\tport?: string\n\tpathname?: string\n\tsearch?: string\n}\n\nexport interface IOptions\n{\n\tignoreError?: boolean\n\tresponse?: any\n}\n\nexport function resultToURL<T extends {\n\trequest?: any;\n}>(result: T, options?: IOptions, res?: any)\n{\n\treturn requestToURL(result?.request, options, res ?? options?.response ?? result)\n}\n\nexport function requestToURL(req: any, options?: IOptions, res?: any)\n{\n\ttry\n\t{\n\t\treturn new LazyURL(req.url ?? req.res?.responseUrl ?? _requestToURL(req, res ?? options?.response))\n\t}\n\tcatch (e)\n\t{\n\t\tif (!options?.ignoreError)\n\t\t{\n\t\t\tthrow e\n\t\t}\n\t}\n}\n\nexport function _requestToURL(req: any, res: any)\n{\n\tlet href: string | URL = req._currentUrl;\n\tlet _currentRequest: ClientRequest = req._currentRequest ?? req ?? {};\n\tlet _options: IReqInfo = req._options ?? {};\n\tres ??= {};\n\n\tif (_options.protocol?.length)\n\t{\n\t\tlet u: LazyURL;\n\n\t\tif (_options.protocol && _options.hostname)\n\t\t{\n\t\t\tu = new LazyURL(_options.protocol + '//' + _options.hostname);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tu = new LazyURL(_currentRequest.path);\n\t\t}\n\n\t\tu.set('protocol', _options.protocol ?? _currentRequest.protocol);\n\t\tu.set('port', _options.port);\n\t\tu.set('pathname', _options.pathname ?? _currentRequest.path);\n\t\tu.set('query', _options.search);\n\t\tu.set('auth', _options.auth);\n\t\tu.set('hostname', _options.hostname ?? _currentRequest.getHeader?.('Host') as string ?? _currentRequest.host);\n\n\t\thref = u;\n\t}\n\telse if (typeof _currentRequest.getHeader === 'function')\n\t{\n\t\tlet u = new LazyURL(req.protocol + '//' + _currentRequest.getHeader('Host') ?? _currentRequest.host);\n\n\t\tu.pathname = req.path;\n\t\tu.protocol = req.protocol;\n\n\t\thref = u;\n\t}\n\telse if (!href && res.config?.url)\n\t{\n\t\thref = new LazyURL(res.config.url, res.config.baseURL);\n\n\t\tif (typeof res.config.params !== 'undefined')\n\t\t{\n\t\t\tlet sp = new LazyURLSearchParams(res.config.params);\n\t\t\tsp.forEach((value, key) => {\n\t\t\t\t(href as LazyURL).searchParams.set(key, value);\n\t\t\t})\n\t\t}\n\t}\n\n\treturn new LazyURL(href)\n}\n\nexport default requestToURL\n"],"names":["requestToURL","LazyURL","_requestToURL","_ref2","req","_req$url","url","_req$res","responseUrl","res","options","response","e","ignoreError","href","_currentRequest","_ref3","_req$_currentRequest","_options","_req$_options","_res","u","protocol","_options$protocol2","set","port","pathname","_options$pathname","path","result","request","_ref"],"mappings":"sWAiDC,SAAYA,kCAOV,OAAA,IAAAC,EAAAA,QAAAC,QAAAC,EAAAC,QAAAC,EAAAD,EAAAE,WAAAF,IAAAA,EAAAA,UAAAA,EAAAA,EAAAA,wBAAAG,EAAAC,mBAAAN,IAAAA,EAAAA,EAAAA,cAAAO,EAAAA,MAAAA,EAAAA,EAAAC,MAAAA,OAAA,EAAAA,EAAAC,WAPF,MAAAC,GAWE,GAAAF,MAAAA,IAAAA,EAAAG,iEAUDC,IAAAA,EAAAV,EAAAA,YAGIW,EAAA,QAAAC,EAAA,QAAAC,EAAAb,EAAAW,uBAAA,IAAAE,EAAAA,EAAAb,SAAA,IAAAY,EAAAA,EAAA,GAEJE,EAAA,QAAAC,EAAAf,EAAAc,gBAAA,IAAAC,EAAAA,EAAA,MACA,QAAAC,EAAAX,SAAA,IAAAW,IAAAX,EAAA,+DAhBC,IAAAY,8BAqBFH,sCAMmBH,QAGjBM,EAAAH,IAAAA,WAAA,QAAAA,EAAAA,EAAAI,gBAAA,IAAAC,EAAAA,EAAAR,EAAAO,UAGFD,EAAWG,IAAA,OAAAN,EAAXO,MAGDJ,EAAAA,IAAA,WAAA,QAAeH,EAAAA,EAAfQ,gBAAA,IAAAC,EAAAA,EAA2BZ,EAA3Ba,suBAhGA,OAAA5B,aAAA6B,MAAAA,OAAA,EAAAA,EAAAC,QAAmCpB,UAAnCqB,EAAmCtB,MAAAA,EAAAA,EAAAC,MAAAA,OAAAA,EAAAA,EAAAA,wBAAAmB"}