(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('indent-string'), require('clean-stack'), require('util'), require('check-iterable'), require('array-hyper-unique'), require('err-errors'), require('err-stack-reduce'), require('err-stack-meta'), require('error-stack2')) :
	typeof define === 'function' && define.amd ? define(['exports', 'indent-string', 'clean-stack', 'util', 'check-iterable', 'array-hyper-unique', 'err-errors', 'err-stack-reduce', 'err-stack-meta', 'error-stack2'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.index = {}, global.indentString, global._cleanStack, global.util, global.checkIterable, global.arrayHyperUnique, global.errErrors, global.errStackReduce, global.errStackMeta, global.errorStack2));
})(this, (function (exports, indentString, _cleanStack, util, checkIterable, arrayHyperUnique, errErrors, errStackReduce, errStackMeta, errorStack2) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var indentString__default = /*#__PURE__*/_interopDefaultLegacy(indentString);
	var _cleanStack__default = /*#__PURE__*/_interopDefaultLegacy(_cleanStack);

	function _isAllowedIterable(arr) {
	  return typeof arr !== 'string' && !(arr instanceof String) && checkIterable.isIterable(arr);
	}
	function errorsToMessageList(errors, options, mainError) {
	  var _options, _mainError, _main2;

	  if (!errors || !_isAllowedIterable(errors)) {
	    throw new TypeError(`Invalid input errors: ${errors}`);
	  }

	  (_options = options) !== null && _options !== void 0 ? _options : options = {};
	  const {
	    handleStack = stack => _cleanStack__default["default"](stack)
	  } = options;
	  (_mainError = mainError) !== null && _mainError !== void 0 ? _mainError : mainError = options.error;

	  let _main;

	  let ls = [];
	  const stackReduce = errStackReduce.errStackReduceCore(mainError, options.stackReduceOptions);
	  errors.forEach(error => {
	    if (error === void 0 || error === null) {
	      return;
	    }

	    if (mainError === error) {
	      _main = String(error);
	    } else if (typeof error.stack === 'string') {
	      ls.push(handleStack(errStackMeta.stringifyStackMeta(stackReduce(error)), error));
	    } else {
	      ls.push(util.inspect(error));
	    }
	  });
	  ls = ls.filter(s => s === null || s === void 0 ? void 0 : s.length);

	  if ((_main2 = _main) !== null && _main2 !== void 0 && _main2.length) {
	    ls.unshift(_main);
	  }

	  return arrayHyperUnique.array_unique_overwrite(ls);
	}
	function indentSubErrorMessage(sub_message, options) {
	  var _options2, _options$indent;

	  if (_isAllowedIterable(sub_message)) {
	    sub_message = [...sub_message].join('\n');
	  }

	  (_options2 = options) !== null && _options2 !== void 0 ? _options2 : options = {};
	  return indentString__default["default"](sub_message, (_options$indent = options.indent) !== null && _options$indent !== void 0 ? _options$indent : 4, options.indentOptions);
	}
	function indentSubErrors(errors, options, mainError) {
	  const sub_message = errorsToMessageList(errors, options, mainError);
	  return indentSubErrorMessage(sub_message, options);
	}
	function indentSubErrorsFromError(mainError, options) {
	  let errors = errErrors.getSubErrors(mainError);
	  return indentSubErrors(errors, options, mainError);
	}
	function messageWithSubErrors(mainError, errors, options) {
	  var _errors;

	  (_errors = errors) !== null && _errors !== void 0 ? _errors : errors = errErrors.getSubErrors(mainError);

	  let _e = errorStack2.parseStack(mainError.stack, mainError.message);

	  let lines = [];

	  if (typeof _e.message !== 'undefined') {
	    lines.push(_e.message);
	  }

	  let _em2 = indentSubErrors(errors, options, mainError);

	  if (_em2.length) {
	    if (lines.length === 0) {
	      lines.push('');
	    }

	    lines.push(_em2);
	  }

	  if (lines.length) {
	    return lines.join('\n');
	  }

	  return void 0;
	}

	exports._isAllowedIterable = _isAllowedIterable;
	exports["default"] = messageWithSubErrors;
	exports.errorsToMessageList = errorsToMessageList;
	exports.indentSubErrorMessage = indentSubErrorMessage;
	exports.indentSubErrors = indentSubErrors;
	exports.indentSubErrorsFromError = indentSubErrorsFromError;
	exports.messageWithSubErrors = messageWithSubErrors;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.umd.development.cjs.map
