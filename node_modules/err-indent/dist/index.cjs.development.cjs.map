{"version":3,"file":"index.cjs.development.cjs","sources":["../src/index.ts"],"sourcesContent":["import indentString, { Options as IIndentOptions } from 'indent-string';\nimport _cleanStack from 'clean-stack';\nimport { inspect } from 'util';\nimport { isIterable } from 'check-iterable';\nimport { array_unique_overwrite } from 'array-hyper-unique';\nimport { getSubErrors } from 'err-errors';\nimport { errStackReduceCore, IOptions as IErrStackReduceOptions } from 'err-stack-reduce';\nimport { stringifyStackMeta } from 'err-stack-meta';\nimport { parseStack } from 'error-stack2';\n\nexport interface IOptions<T = any>\n{\n\terror?: Error;\n\n\thandleStack?(stack: string, error: T): string;\n\n\t/**\n\t * @default 4\n\t */\n\tindent?: number,\n\n\t/**\n\t * options for `indent-string`\n\t */\n\tindentOptions?: IIndentOptions,\n\n\tstackReduceOptions?: IErrStackReduceOptions,\n}\n\nexport type IIterableLike<T = any> = Iterable<T> | IterableIterator<T>;\nexport type IIterableAllowed<T, A extends IIterableLike<T>> = Exclude<A, string | String>;\n\nexport function _isAllowedIterable(arr: any)\n{\n\treturn (typeof arr !== 'string' && !(arr instanceof String) && isIterable(arr))\n}\n\nexport function errorsToMessageList<T, A extends IIterableLike<T> = IIterableLike<T>>(errors: IIterableAllowed<T, A>,\n\toptions?: IOptions<T>,\n\tmainError?: Error,\n)\n{\n\tif (!errors || !_isAllowedIterable(errors))\n\t{\n\t\tthrow new TypeError(`Invalid input errors: ${errors}`)\n\t}\n\n\toptions ??= {};\n\n\tconst { handleStack = (stack: string) => _cleanStack(stack) } = options;\n\n\tmainError ??= options.error;\n\n\tlet _main: string;\n\n\tlet ls: string[] = [];\n\n\tconst stackReduce = errStackReduceCore(mainError, options.stackReduceOptions);\n\n\t(errors as any as (T & Error)[])\n\t\t.forEach((error) =>\n\t\t{\n\t\t\tif (error === void 0 || error === null)\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (mainError === error)\n\t\t\t{\n\t\t\t\t_main = String(error)\n\t\t\t}\n\t\t\telse if (typeof error.stack === 'string')\n\t\t\t{\n\t\t\t\tls.push(handleStack(stringifyStackMeta(stackReduce(error)), error))\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tls.push(inspect(error))\n\t\t\t}\n\n\t\t})\n\t;\n\n\tls = ls.filter(s => s?.length)\n\n\tif (_main?.length)\n\t{\n\t\tls.unshift(_main)\n\t}\n\n\treturn array_unique_overwrite(ls)\n}\n\nexport function indentSubErrorMessage(sub_message: string | IIterableLike<string>, options?: IOptions)\n{\n\tif (_isAllowedIterable(sub_message))\n\t{\n\t\tsub_message = [...sub_message].join('\\n');\n\t}\n\n\toptions ??= {};\n\n\treturn indentString(sub_message as string, options.indent ?? 4, options.indentOptions)\n}\n\nexport function indentSubErrors<T, A extends IIterableLike<T> = IIterableLike<T>>(errors: IIterableAllowed<T, A>,\n\toptions?: IOptions<T>,\n\tmainError?: Error,\n)\n{\n\tconst sub_message = errorsToMessageList(errors, options, mainError);\n\treturn indentSubErrorMessage(sub_message, options);\n}\n\nexport function indentSubErrorsFromError<T, A extends IIterableLike<T> = IIterableLike<T>>(mainError?: Error,\n\toptions?: IOptions<T>,\n)\n{\n\tlet errors = getSubErrors(mainError) as IIterableAllowed<T, A>;\n\n\treturn indentSubErrors(errors, options, mainError)\n}\n\nexport function messageWithSubErrors<T, A extends IIterableLike<T> = IIterableLike<T>>(mainError: Error,\n\terrors?: IIterableAllowed<T, A>,\n\toptions?: IOptions<T>,\n)\n{\n\terrors ??= getSubErrors(mainError) as IIterableAllowed<T, A>;\n\n\tlet _e = parseStack(mainError.stack, mainError.message);\n\n\tlet lines = [] as string[];\n\n\tif (typeof _e.message !== 'undefined')\n\t{\n\t\tlines.push(_e.message);\n\t}\n\n\tlet _em2 = indentSubErrors(errors, options, mainError);\n\n\tif (_em2.length)\n\t{\n\t\tif (lines.length === 0)\n\t\t{\n\t\t\tlines.push('');\n\t\t}\n\t\tlines.push(_em2);\n\t}\n\n\tif (lines.length)\n\t{\n\t\treturn lines.join('\\n')\n\t}\n\n\treturn void 0;\n}\n\nexport default messageWithSubErrors\n"],"names":["String","isIterable","errorsToMessageList","errors","handleStack","_cleanStack","options","_main","stackReduce","errStackReduceCore","stackReduceOptions","forEach","error","mainError","ls","stringifyStackMeta","inspect","length"],"mappings":";;;;;;;;;;;;;;;;;;;AAKA,SAAA,kBAAA,CAAA,GAAA,EAAA;EACA,OAA0FA,OAAAA,GAAAA,KAAAA,QAAAA,IAAAA,EAAAA,GAAAA,YAAAA,MAA1F,KAA0FC,wBAA1F,CAAA,GAAA,CAAA,CAAA;AACA,CAAA;AAkEI,SAAOC,mBAAP,OAAA,SAAA,WAAA;;;AAGD,EAAA,IAAA,CAAA,MAAA,IAAA,CAAA,kBAAA,CAAAC,MAAA,CAAA,EAAA;;AAHC,GAAA;;EAOF,CACA,QAAA,GAAA,OAAA,MAAA,IADA,4CACA,GADA,EAAA,CAAA;EAUD,MAAA;AAAAC,IAAAA,WAA6B,GAC7B,KAAA,IAAAC,+BAAA,CAAA,KAAA,CAAA;AADA,GAAA,GACAC,OADA,CAAA;yBAGD,MAAgBA,IAAAA,IAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAAA,UAAAA,GAAAA,SAAAA,GAAAA,OAAAA,CAAAA,KAAAA,CAAAA;;AAEfC,EAAAA,IAAAA,KAAAA,CAAAA;;AAGC,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA;AAID,EAAA,MAAAC,WAAA,GAAmBC,qDAA0CC,mBAA7D,CAAA;AAGDP,EAAAA,MAAAA,CAMCQ,OAND;AASA,IAAA,IAAgBC,KAAA,KAAA,KAAA,CAAA,IAAAA,KAAAA,KAAAA,IAAhB,EAAgB;AAMR,MAAA,OAAA;AAGR,KAAA;;AAKCC,IAAAA,IAAAA,SAAW,KAAAD,KAAA,EAAA;MAIPL,KAAA,GAAA,MAAQ,CAAeK,KAAf,CAAR,CAAA;AAKH,KAAA,MAAA,IAAA,OAAA,KAAA,CAAA,KAAA,KAAA,QAAA,EAAA;AAIGE,MAAAA,EAAAA,CAAAA,IAAAA,CAAAA,WACJ,CACCC,+BAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CADD,EACCH,KADD,CADI,CAAA,CAAA;KAJH,MASC;AACD,MAAA,EAAA,CAAA,IAAA,CAAAI,YAAW,CAAA,KAAA,CAAA,CAAA,CAAA;;AA1Cb,GAAA,CAAA,CAAA;;;+DAmDCC,MAAA,EAAA;AAED,IAAA,EAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;;;;;;;;;;;AA9EE,EAAA,CAAA,SAAA,GAAA,OAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,OAAA,GAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}